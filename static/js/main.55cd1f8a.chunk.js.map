{"version":3,"sources":["imgs/no.svg","imgs/gb.svg","prismic-utils.js","constants.js","HeroComponent.jsx","HeroList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","accessDocument","docType","lang","a","Prismic","api","then","query","Predicates","at","response","results","map","result","data","HeroComponent","props","className","Grid","container","item","xs","src","img","alt","name","power","text","HeroList","React","useState","heroes","setHeroes","useEffect","console","log","Powers","setPowers","Title","setTitle","title","section","i","find","uid","iid","hero","picture","url","key","App","norwegian","setNorwegian","Button","onClick","no","gb","justify","alignItems","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.55cd1f8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no.4b57a28e.svg\";","module.exports = __webpack_public_path__ + \"static/media/gb.49e28de8.svg\";","import Prismic from \"prismic-javascript\";\r\nimport { RichText } from \"prismic-reactjs\";\r\n\r\nimport {apiEndpoint } from \"./constants.js\";\r\n\r\nexport const linkResolver = function(doc) {\r\n  // Pretty URLs for known types\r\n  if (doc.type === \"infoboks\") return \"info/\" + doc.uid;\r\n\r\n  // Fallback for other types, in case new custom types get created\r\n  return \"/doc/\" + doc.id;\r\n};\r\n/** See prismic docs  */\r\nexport const html = document =>\r\n  RichText.render(document.data.text_field, linkResolver);\r\n\r\nexport const accessDocument = async (docType, lang) => {\r\n  \r\n  lang = lang || 'en-gb';\r\n  return Prismic.api(apiEndpoint, ).then(api => {\r\n    return api\r\n      .query(Prismic.Predicates.at(\"document.type\", docType), { lang : lang })\r\n      .then(response => {\r\n        if (response) {\r\n          return response.results.map(result => result.data);\r\n        }\r\n      });\r\n  });\r\n};\r\n","export const apiEndpoint = \"https://my-heroes.cdn.prismic.io/api/v2\";\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport './App.css';\r\n\r\n\r\nfunction HeroComponent(props) {\r\n\r\n  return (\r\n    <div className=\"Hero\">\r\n      <Grid container>\r\n        <Grid item xs={4}>\r\n       <img className=\"Picture\" src={props.img} alt=\"hero\"></img>\r\n       </Grid>\r\n       <Grid item xs={8}>\r\n        <h4>{props.name}</h4>\r\n      <p>{props.power && props.power.name[0].text}</p>\r\n        </Grid>\r\n    </Grid>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default HeroComponent;","import React, { useEffect } from 'react';\r\nimport { accessDocument } from \"./prismic-utils.js\";\r\nimport HeroComponent from \"./HeroComponent.jsx\";\r\nimport './App.css';\r\n\r\nfunction HeroList(props) {\r\n\r\n    const [heroes, setHeroes] = React.useState(null);\r\n    useEffect(() => {\r\n      accessDocument(\"superhero\").then(result => {\r\n          console.log(result);\r\n        return setHeroes(result);\r\n      });\r\n    }, []);\r\n    const [Powers, setPowers] = React.useState(null);\r\n    useEffect(() => {\r\n      accessDocument(\"power\", props.lang).then(result => {\r\n          console.log(result);\r\n        return setPowers(result);\r\n      });\r\n    }, [props.lang]);\r\n    const [Title, setTitle] = React.useState(null);\r\n    useEffect(() => {\r\n      accessDocument(\"title\", props.lang).then(result => {\r\n          console.log(result);\r\n        return setTitle(result);\r\n      });\r\n    }, [props.lang]);\r\n\r\n  return (\r\n    <div className=\"HeroList\">\r\n      <h1>{Title != null && Title[0].title}</h1>\r\n      {heroes &&\r\n            heroes.map((section, i) => {\r\n            let power = Powers.find(power => section.power.uid === power.iid);\r\n              return <HeroComponent hero={section} name={section.name[0].text} img={section.picture.url} power={power} key={i} />;\r\n            })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeroList;","import React, { useState, useEffect } from 'react';\nimport no from './imgs/no.svg';\nimport gb from './imgs/gb.svg';\nimport './App.css';\nimport HeroList from \"./HeroList.jsx\"\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nfunction App() {\n\n  const [norwegian, setNorwegian] = React.useState(false);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Grid container>\n          <Grid item xs={7}>\n            <h5>Prismic demo 2020</h5>\n          </Grid>\n          <Grid item xs={3}>\n            <Button onClick={() => setNorwegian(!norwegian)}>{norwegian ? <img src={no} alt=\"no\" className=\"Flag\"/> : <img src={gb} alt=\"gb\" className=\"Flag\"/> }</Button>\n          </Grid>\n        </Grid>\n      </header>\n      <Grid container   justify=\"center\"  alignItems=\"center\">\n        <Grid item xs={5}>\n      <HeroList lang={norwegian ? 'no': 'en-gb'}></HeroList>\n      </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}